name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: |
          cd server
          npm ci
      - name: Lint
        run: |
          cd server
          npm run lint || true
      - name: Test
        run: |
          cd server
          npm test || true

  docker-build-push:
    needs: build-test-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build Docker images
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-backend:latest ./server
          # docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-frontend:latest ./client # Uncomment if client exists
      - name: Login to Docker Hub
        run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Push Docker images
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-backend:latest
          # docker push ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-frontend:latest # Uncomment if client exists

  deploy:
    needs: docker-build-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to remote server via SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_KEY }}
          port: ${{ secrets.REMOTE_PORT }}
          source: "docker-compose.yml"
          target: "/home/${{ secrets.REMOTE_USER }}/app"
      - name: SSH and restart services
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_KEY }}
          port: ${{ secrets.REMOTE_PORT }}
          script: |
            cd /home/${{ secrets.REMOTE_USER }}/app
            docker-compose pull
            docker-compose up -d --remove-orphans 